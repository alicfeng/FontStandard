{"title":"Styling Components - Stencil","description":"Styling Components","url":"/docs/styling","contributors":["jthoms1","shreeshbhat"],"headings":[{"id":"styling-components","level":1,"text":"Styling Components"},{"id":"shadow-dom","level":2,"text":"Shadow DOM"},{"id":"what-is-shadow-dom","level":3,"text":"What is Shadow DOM"},{"id":"browser-support","level":3,"text":"Browser Support"},{"id":"shadow-dom-in-stencil","level":3,"text":"Shadow DOM in Stencil"},{"id":"things-to-remember-with-shadow-dom","level":3,"text":"Things to remember with Shadow DOM"},{"id":"scoped-css","level":3,"text":"Scoped CSS"},{"id":"global-styles","level":2,"text":"Global styles"},{"id":"css-variables","level":2,"text":"CSS Variables"},{"id":"what-are-css-variables","level":3,"text":"What are CSS Variables?"},{"id":"use-case","level":3,"text":"Use Case"},{"id":"using-css-variables-in-stencil","level":3,"text":"Using CSS Variables in Stencil"},{"id":"defining-css-variables","level":3,"text":"Defining CSS Variables"},{"id":"using-a-css-variable","level":3,"text":"Using a CSS Variable"},{"id":"ie-support","level":3,"text":"IE support"}],"srcPath":"./src/docs/components/styling.md","hypertext":["div",null,["h1",{"id":"styling-components"},"\n  \n  Styling Components\n  \n"],"\n\n",["h2",{"id":"shadow-dom"},"\n  ",["a",{"class":"heading-link","href":"#shadow-dom"},["app-icon",{"name":"link"}],"\n  Shadow DOM\n  "],"\n"],"\n\n",["h3",{"id":"what-is-shadow-dom"},"\n  ",["a",{"class":"heading-link","href":"#what-is-shadow-dom"},["app-icon",{"name":"link"}],"\n  What is Shadow DOM\n  "],"\n"],"\n",["p",null,["a",{"href":"https://developers.google.com/web/fundamentals/web-components/shadowdom"},"Shadow DOM"]," is an API built into the browser that allows for DOM encapsulation and style encapsulation. Shadow DOM shields our component from its surrounding environment. This means that we do not need to be concerned about scoping our CSS correctly, nor worry about our internal DOM being interfered with by anything outside our component."],"\n\n",["h3",{"id":"browser-support"},"\n  ",["a",{"class":"heading-link","href":"#browser-support"},["app-icon",{"name":"link"}],"\n  Browser Support\n  "],"\n"],"\n",["p",null,"Shadow DOM is currently natively supported in the following browsers:"],"\n",["ul",null,"\n",["li",null,"Chrome"],"\n",["li",null,"Firefox"],"\n",["li",null,"Safari"],"\n",["li",null,"Opera"],"\n"],"\n",["p",null,"In browsers which do not support Shadow DOM we fall back to scoped CSS. This gives you the style encapsulation that comes along with Shadow DOM but without loading in a huge Shadow DOM polyfill."],"\n",["blockquote",null,"\n",["p",null,"Confused about what scoped CSS is? Don't worry, we will ",["a",{"href":"#scoped-css"},"explain this later"]," in detail."],"\n"],"\n\n",["h3",{"id":"shadow-dom-in-stencil"},"\n  ",["a",{"class":"heading-link","href":"#shadow-dom-in-stencil"},["app-icon",{"name":"link"}],"\n  Shadow DOM in Stencil\n  "],"\n"],"\n",["p",null,"Shadow DOM is not currently turned on by default for web components built with Stencil. To turn on Shadow DOM in a web component built with Stencil, you can use the ",["code",null,"shadow"]," param in the component decorator. Below is an example of this:"],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-tsx"},["code",{"class":"language-tsx"},"@",["span",{"class":"token function"},"Component"],["span",{"class":"token punctuation"},"("],["span",{"class":"token punctuation"},"{"],"\n  tag",["span",{"class":"token operator"},":"]," ",["span",{"class":"token string"},"'shadow-component'"],["span",{"class":"token punctuation"},","],"\n  styleUrl",["span",{"class":"token operator"},":"]," ",["span",{"class":"token string"},"'shadow-component.css'"],["span",{"class":"token punctuation"},","],"\n  shadow",["span",{"class":"token operator"},":"]," ",["span",{"class":"token boolean"},"true"],"\n",["span",{"class":"token punctuation"},"}"],["span",{"class":"token punctuation"},")"],"\n",["span",{"class":"token keyword"},"export"]," ",["span",{"class":"token keyword"},"class"]," ",["span",{"class":"token class-name"},"ShadowComponent"]," ",["span",{"class":"token punctuation"},"{"],"\n\n",["span",{"class":"token punctuation"},"}"]]],"\n  "],"\n  \n",["h3",{"id":"things-to-remember-with-shadow-dom"},"\n  ",["a",{"class":"heading-link","href":"#things-to-remember-with-shadow-dom"},["app-icon",{"name":"link"}],"\n  Things to remember with Shadow DOM\n  "],"\n"],"\n",["ul",null,"\n",["li",null,["p",null,"QuerySelector: When using Shadow DOM and you want to query an element inside your web component you must use ",["code",null,"this.el.shadowRoot.querySelector()"],". This is because all of your DOM inside your web component is in a shadowRoot that Shadow DOM creates."],"\n"],"\n",["li",null,["p",null,"Global Styles: To externally style a component with Shadow DOM you must use ",["a",{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables"},"CSS Custom Properties"]," or the proposed ",["a",{"href":"https://meowni.ca/posts/part-theme-explainer/"},"CSS Shadow Parts"],"."],"\n"],"\n",["li",null,["p",null,"Normally you would wrap your styles in the tag name of the component like so:"],"\n"],"\n"],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-css"},["code",{"class":"language-css"},["span",{"class":"token selector"},"my-element"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token property"},"color"],["span",{"class":"token punctuation"},":"]," black",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"],"\n",["span",{"class":"token selector"},"my-element div"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token property"},"background"],["span",{"class":"token punctuation"},":"]," blue",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"]]],"\n  "],"\n  ",["p",null,"With Shadow DOM enabled, elements within the shadow root are scoped, and styles outside of the component do not apply. As a result, CSS selectors inside the component can be simplified, and the above example could be:"],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-css"},["code",{"class":"language-css"},["span",{"class":"token selector"},":host"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token property"},"color"],["span",{"class":"token punctuation"},":"]," black",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"],"\n",["span",{"class":"token selector"},"div"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token property"},"background"],["span",{"class":"token punctuation"},":"]," blue",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"]]],"\n  "],"\n  \n",["h3",{"id":"scoped-css"},"\n  ",["a",{"class":"heading-link","href":"#scoped-css"},["app-icon",{"name":"link"}],"\n  Scoped CSS\n  "],"\n"],"\n",["p",null,"In browsers that do not currently support Shadow DOM, web components built with Stencil will fall back to using scoped CSS instead of loading a large Shadow DOM polyfill. Scoped CSS automatically scopes CSS to an element by appending each of your styles with a data attribute at run time."],"\n\n",["h2",{"id":"global-styles"},"\n  ",["a",{"class":"heading-link","href":"#global-styles"},["app-icon",{"name":"link"}],"\n  Global styles\n  "],"\n"],"\n",["p",null,"While Stencil encourages developers to write the styles scoped to each component, sometimes it's required to have global styles that apply to the whole document regardless of which components are used."],"\n",["p",null,"In order to do so, ",["code",null,"stencil.config.ts"]," comes with an optional ",["a",{"href":"https://stenciljs.com/docs/config#globalstyle"},["code",null,"globalStyle"]," setting"]," that points to a stylesheet path."],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-tsx"},["code",{"class":"language-tsx"},["span",{"class":"token keyword"},"export"]," ",["span",{"class":"token keyword"},"const"]," config",["span",{"class":"token operator"},":"]," Config ",["span",{"class":"token operator"},"="]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token keyword"},"namespace"],["span",{"class":"token operator"},":"]," ",["span",{"class":"token string"},"'app'"],["span",{"class":"token punctuation"},","],"\n  globalStyle",["span",{"class":"token operator"},":"]," ",["span",{"class":"token string"},"'src/global/global.css'"],["span",{"class":"token punctuation"},","],"\n  outputTarget",["span",{"class":"token operator"},":"]," ",["span",{"class":"token punctuation"},"["],["span",{"class":"token punctuation"},"{"],"\n    ",["span",{"class":"token keyword"},"type"],["span",{"class":"token operator"},":"]," ",["span",{"class":"token string"},"'www'"],"\n  ",["span",{"class":"token punctuation"},"}"],["span",{"class":"token punctuation"},"]"],"\n",["span",{"class":"token punctuation"},"}"]]],"\n  "],"\n  ",["p",null,"The compiler will run the same minification, autoprefixing and plugins over ",["code",null,"global.css"]," and generate an output file for the ",["a",{"href":"https://stenciljs.com/docs/www"},["code",null,"www"]]," and ",["a",{"href":"https://stenciljs.com/docs/distribution"},["code",null,"dist"]]," output targets. The generated file will always have the ",["code",null,".css"]," extension and be named as the specified ",["code",null,"namespace"],"."],"\n",["p",null,"In the example above, since the namespace is ",["code",null,"app"],", the generated global styles file will be located at: ",["code",null,"./www/build/app.css"],"."],"\n",["p",null,"This file must be manually imported in the ",["code",null,"index.html"]," of your application, which you can find in ",["code",null,"src/index.html"],":"],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-tsx"},["code",{"class":"language-tsx"},["span",{"class":"token tag"},["span",{"class":"token tag"},["span",{"class":"token punctuation"},"<"],"link"]," ",["span",{"class":"token attr-name"},"rel"],["span",{"class":"token attr-value"},["span",{"class":"token punctuation attr-equals"},"="],["span",{"class":"token punctuation"},"\""],"stylesheet",["span",{"class":"token punctuation"},"\""]]," ",["span",{"class":"token attr-name"},"href"],["span",{"class":"token attr-value"},["span",{"class":"token punctuation attr-equals"},"="],["span",{"class":"token punctuation"},"\""],"/build/app.css",["span",{"class":"token punctuation"},"\""]],["span",{"class":"token punctuation"},">"]]]],"\n  "],"\n  ",["p",null,"Keep in mind that global styles should be reserved for ",["strong",null,"global"]," styles, ie, you should try to avoid styling your components with it, instead, some interesting use cases can be:"],"\n",["ul",null,"\n",["li",null,"Theming: defining CSS variables used across the app"],"\n",["li",null,"Load fonts with ",["code",null,"@font-face"]],"\n",["li",null,"App wide font-family"],"\n",["li",null,"Style body background"],"\n",["li",null,"CSS resets"],"\n"],"\n\n",["h2",{"id":"css-variables"},"\n  ",["a",{"class":"heading-link","href":"#css-variables"},["app-icon",{"name":"link"}],"\n  CSS Variables\n  "],"\n"],"\n\n",["h3",{"id":"what-are-css-variables"},"\n  ",["a",{"class":"heading-link","href":"#what-are-css-variables"},["app-icon",{"name":"link"}],"\n  What are CSS Variables?\n  "],"\n"],"\n",["p",null,["a",{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables"},"CSS Variables"]," are a lot like ",["a",{"href":"https://ionicframework.com/docs/theming/sass-variables/"},"Sass Variables"],", but built into the browser. CSS Variables allow you to specify CSS properties that can be used across your app."],"\n\n",["h3",{"id":"use-case"},"\n  ",["a",{"class":"heading-link","href":"#use-case"},["app-icon",{"name":"link"}],"\n  Use Case\n  "],"\n"],"\n",["p",null,"One use case for CSS Variables is colors. If your app has a primary brand color that is used across your app then instead of writing that same color out each place you need it in your app you can create a variable for it and then use that variable anywhere you need that color in your app. Also, if you ever need to change this color you will only have to change the variable and then it will be updated across your app."],"\n\n",["h3",{"id":"using-css-variables-in-stencil"},"\n  ",["a",{"class":"heading-link","href":"#using-css-variables-in-stencil"},["app-icon",{"name":"link"}],"\n  Using CSS Variables in Stencil\n  "],"\n"],"\n",["p",null,"Here are the recommended steps to use CSS Variables in Stencil:"],"\n",["ul",null,"\n",["li",null,"Create a CSS file to hold your variable definitions. We normally recommend creating a ",["code",null,"variables.css"]," file in ",["code",null,"src/global/"]],"\n",["li",null,"You can then put this config ",["code",null,"globalStyle: 'src/global/variables.css'"]," into your ",["code",null,"stencil.config.ts"]," file."],"\n"],"\n",["p",null,"That's it! Now you can start defining your variables."],"\n\n",["h3",{"id":"defining-css-variables"},"\n  ",["a",{"class":"heading-link","href":"#defining-css-variables"},["app-icon",{"name":"link"}],"\n  Defining CSS Variables\n  "],"\n"],"\n",["p",null,"Here is an example of defining a CSS Variable:"],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-css"},["code",{"class":"language-css"},["span",{"class":"token comment"},"/* inside our src/global/variables.css file */"],"\n\n",["span",{"class":"token selector"},":root"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token property"},"--app-primary-color"],["span",{"class":"token punctuation"},":"]," #488aff",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"]]],"\n  "],"\n  ",["p",null,"In this example we have defined a CSS Variable called ",["code",null,"--app-primary-color"]," that is set to the color ",["code",null,"#488aff"],". The ",["code",null,":root"]," selector in this example is a ",["a",{"href":"https://developer.mozilla.org/en-US/docs/Web/CSS/:root"},"CSS pseudo-class"]," that defines the variable on the root element of your project (usually ",["code",null,"<html>"],") so that the variable can be used across your app."],"\n\n",["h3",{"id":"using-a-css-variable"},"\n  ",["a",{"class":"heading-link","href":"#using-a-css-variable"},["app-icon",{"name":"link"}],"\n  Using a CSS Variable\n  "],"\n"],"\n",["p",null,"Here is an example of using the CSS Variable that we defined above:"],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-css"},["code",{"class":"language-css"},["span",{"class":"token selector"},"h1"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token property"},"color"],["span",{"class":"token punctuation"},":"]," ",["span",{"class":"token function"},"var"],["span",{"class":"token punctuation"},"("],"--app-primary-color",["span",{"class":"token punctuation"},")"],"\n",["span",{"class":"token punctuation"},"}"]]],"\n  "],"\n  ",["p",null,"This will apply the color we defined in our CSS Variable, in this case ",["code",null,"#488aff"],", to our ",["code",null,"h1"]," element."],"\n\n",["h3",{"id":"ie-support"},"\n  ",["a",{"class":"heading-link","href":"#ie-support"},["app-icon",{"name":"link"}],"\n  IE support\n  "],"\n"],"\n",["p",null,"IE11 does not support CSS variables natively, stencil does however provide a best-effort polyfill since it's impossible to polyfill CSS features in the same way JS can be polyfilled."],"\n",["p",null,"The stencil polyfill for CSS variables has plenty of limitations with respect a browser supporting it natively, and incurs a heavy performance overhead."],"\n",["ul",null,"\n",["li",null,"Global CSS variables can only be declared in ",["code",null,":root"]," or ",["code",null,"html"],", they can't be dynamic."],"\n",["li",null,"Only the stylesheets of ",["code",null,"shadow"]," or ",["code",null,"scoped"]," components can have dynamic CSS variables."],"\n",["li",null,"CSS variables within a component can ONLY be defined within a ",["code",null,":host(...)"]," selector."],"\n"],"\n\n  ",["highlight-code",null,"\n    ",["pre",{"class":"language-css"},["code",{"class":"language-css"},["span",{"class":"token selector"},":host()"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token comment"},"/* This works */"],"\n  ",["span",{"class":"token property"},"--color"],["span",{"class":"token punctuation"},":"]," black",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"],"\n",["span",{"class":"token selector"},":host(.white)"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token comment"},"/* This works */"],"\n  ",["span",{"class":"token property"},"--color"],["span",{"class":"token punctuation"},":"]," white",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"],"\n",["span",{"class":"token selector"},".selector"]," ",["span",{"class":"token punctuation"},"{"],"\n  ",["span",{"class":"token comment"},"/* This DOES NOT work in IE11 */"],"\n  ",["span",{"class":"token property"},"--color"],["span",{"class":"token punctuation"},":"]," red",["span",{"class":"token punctuation"},";"],"\n",["span",{"class":"token punctuation"},"}"]]],"\n  "],"\n  ",["ul",null,"\n",["li",null,"CSS variables within a component can be consumed (",["code",null,"var(--thing)"],") in any selector."],"\n"],"\n",["p",null,"The performance overhead of using CSS variables in IE11 is elevated in terms of CPU time and memory. This is because in order to \"simulate\" the dynamic nature of CSS variables, the polyfill needs to dynamically generate a different stylesheet PER instance. For example, if you have 200 ",["code",null,"my-cmp"]," elements in the DOM, the polyfill will attach 200 analogous ",["code",null,"<style>"]," tags to style each element."],"\n",["p",null,"The total amount of stylesheets to be handled by IE11 can quickly grow, consuming a lot of memory and requiring a lot of CPU for each Style Invalidation."]]}